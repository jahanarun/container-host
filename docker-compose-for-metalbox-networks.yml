version: "3.9"

networks:
  vlan_80:
    driver: macvlan # Otherwise PiHole and other containers cannot resolve DNS internally due to NAT issue within Docker
    # driver: ipvlan
    driver_opts:
      # ipvlan_mode: l2
      parent: ${NETWORK_DEVICE}.${METAL_VLAN_ID}
      name: macvlan${METAL_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${METAL_VLAN_ID}.0/24
          gateway: ${METAL_GATEWAY}
          ip_range: 10.100.${METAL_VLAN_ID}.128/26 # 128-191
          # aux_addresses:
          #   reserved: 10.100.${METAL_VLAN_ID}.1
          #   dns: 10.100.${METAL_VLAN_ID}.3

  vlan_30:
    driver: macvlan # Otherwise PiHole container cannot resolve DNS internally due to NAT issue within Docker
    driver_opts:
      parent: ${NETWORK_DEVICE}.${QUANTUM_VLAN_ID}
      name: macvlan${QUANTUM_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${QUANTUM_VLAN_ID}.0/24
          gateway: ${QUANTUM_GATEWAY}
          ip_range: 10.100.${QUANTUM_VLAN_ID}.50/29 # 48 - 55

  vlan_20:
    driver: macvlan # Otherwise PiHole container cannot resolve DNS internally due to NAT issue within Docker
    driver_opts:
      parent: ${NETWORK_DEVICE}.${THINGS_VLAN_ID}
      name: macvlan${THINGS_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${THINGS_VLAN_ID}.0/24
          gateway: ${THINGS_GATEWAY}
          ip_range: 10.100.${THINGS_VLAN_ID}.16/30 # 16 - 19

  traefik_proxy:
    driver: bridge
    internal: true

services:
  do-nothing:
    image: jhnrn/do-nothing:latest
    container_name: do-nothing-network-initializer
    restart: unless-stopped
    networks:
      vlan_20:
      vlan_30:
      vlan_80:
      traefik_proxy:

  # mdns:
  #   image: jhnrn/avahi
  #   hostname: mdns
  #   container_name: mdns
  #   environment:
  #     - REFLECTOR_ENABLE_REFLECTOR=yes
  #   restart: unless-stopped
  #   networks:
  #     vlan_20:
  #       ipv4_address: ${AVAHI_THINGS_IP_ADDRESS}
  #     vlan_30:
  #       ipv4_address: ${AVAHI_QUANTUM_IP_ADDRESS}

  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
        - CONTAINERS=1 # Allow access to viewing containers
        - POST=0 # Disallow any POST operations (effectively read-only)
    # ports:
    #     - 2375:2375
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    networks:
      traefik_proxy:
      vlan_80:
        ipv4_address: ${METAL_DOCKERPROXY_IP_ADDRESS}
    restart: unless-stopped

  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=${LOGLEVEL:-INFO}"
      - "--accesslog=true"
      - '--accessLog.filePath="/logs/access.log"'
      - '--accessLog.format="json"'
      - "--api.dashboard=true"
      - "--providers.docker.endpoint=tcp://dockerproxy:2375"
      - "--providers.file.directory=/FileProvider/"
      - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web-noredirect.address=:81"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.web-secure.forwardedHeaders.trustedIPs=${TRUSTED_IPS}"
      - "--entrypoints.ssh.address=:22"
      - "--entrypoints.rtsp.address=:8554"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
      # - '--traefikLog.filePath="/logs/traefik.log"'
      # - '--traefikLog.format="json"'
      # - '--accessLog.filters.statusCodes="200,300-302"'
      # - '--accessLog.filters.retryAttempts="true"'
      # - '--accessLog.filters.minDuration="10ms"'
      # - '--accessLog.fields.defaultMode="keep"'
      # - '--accessLog.fields.names="Username=drop Hostname=drop"'
      # - '--accessLog.fields.headers.defaultMode="keep"'
      # - '--accessLog.fields.headers.names="User-Agent=redact Authorization=drop Content-Type=keep"'
    networks:
      traefik_proxy:
      # vlan_20:
      #   ipv4_address: ${TRAEFIK_IP_ADDRESS_FOR_THINGS}
      vlan_80:
        ipv4_address: ${TRAEFIK_IP_ADDRESS}
    dns:
      - ${METAL_DNS_IP_ADDRESS}
      - 1.1.1.1
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.metalbox.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-noredirect"
      # - "traefik.http.routers.api.tls.certresolver=certificato"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - "traefik.http.middlewares.private-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${PRIVATE_IPS_COMMA_SEPARATED},${METAL_NETWORK}"
      - "traefik.http.middlewares.quantum-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${QUANTUM_NETWORK}"
      - "traefik.http.middlewares.quantum_metal-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${QUANTUM_NETWORK},${METAL_NETWORK}"
      - "traefik.http.middlewares.quantum_things-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${QUANTUM_NETWORK},${THINGS_NETWORK}"
      - "traefik.http.middlewares.things-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${THINGS_NETWORK}"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - traefik.docker.network=networks_traefik_proxy
      - homepage.group=Metal
      - homepage.name=Traefik
      - homepage.weight=1000
      - homepage.description=serving Quantum network
      - homepage.icon=traefik.png
      - homepage.href=https://traefik.metalbox.${DOMAIN}
      - homepage.widget.type=traefik
      - homepage.widget.url=https://traefik.metalbox.${DOMAIN}
      # - homepage.widget.fields=["routers", "services", "middleware"]
      - autoheal=true
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock:ro  # So that Traefik can listen to the Docker events
      - /etc/localtime:/etc/localtime:ro
      - ${DATA_STORAGE}/traefik/certs:/letsencrypt
      - ${DATA_STORAGE}/traefik/dynamic:/FileProvider
      - ${DATA_STORAGE}/traefik/logs:/logs
    restart: always
    depends_on:
      - dockerproxy
    healthcheck: # This is to announce to the network (router and switch) that this ip address is sitting here
      # test: traefik healthcheck --ping && ping -c 1 bing.com || exit 1
      test: traefik healthcheck --ping || exit 1
      interval: 30s
      retries: 5
      start_period: "60s"

  autoheal:
    image: jhnrn/docker-autoheal:latest
    container_name: "autoheal"
    restart: always
    environment:
      TZ: ${TZ}
      AUTOHEAL_CONTAINER_LABEL: autoheal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    network_mode: none

  # cloudflared-tunnel:
  #   image: jhnrn/cloudflared:latest
  #   container_name: "cloudflared-tunnel"
  #   hostname: cloudflared-tunnel
  #   restart: always
  #   networks:
  #     vlan_80:
  #     traefik_proxy:
  #   dns:
  #     - ${METAL_DNS_IP_ADDRESS}
  #   environment:
  #     TZ: ${TZ}
  #     TUNNEL_METRICS: "0.0.0.0:${CLOUDFARED_METRICS_PORT}"
  #   command:
  #     - tunnel
  #     - --no-autoupdate
  #     - run
  #     - --token
  #     - ${CLOUDFARED_TOKEN}
  #   labels:
  #     - homepage.group=Network
  #     - homepage.weight=2000
  #     - homepage.name=Cloudflared tunnel (metalbox)
  #     - homepage.description=for Metal
  #     - homepage.icon=cloudflare-zero-trust.png
  #     - homepage.widget.type=cloudflared
  #     - homepage.widget.accountid=${CLOUDFLARED_TUNNEL_ACCOUNTID}
  #     - homepage.widget.tunnelid=${CLOUDFLARED_TUNNEL_TUNNELID_1}
  #     - homepage.widget.key=${CLOUDFLARE_TUNNEL_API_READ_TOKEN}
  #   healthcheck:
  #     test: curl -sSf 'http://localhost:${CLOUDFARED_METRICS_PORT}/healthcheck' || exit 1
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10

  dozzle-agent:
    container_name: dozzle-agent
    image: amir20/dozzle:latest
    environment:
      - DOZZLE_HOSTNAME=metalbox
    command: agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      vlan_80:
        ipv4_address: ${METALBOX_DOZZLE_AGENT_IP_ADDRESS}
    # ports:
    #   - 7007:7007
    healthcheck:
      test: ["CMD", "/dozzle", "healthcheck"]
      interval: 5s
      retries: 5
      start_period: 5s
      # start_interval: 5s
    labels:
      - autoheal=true
