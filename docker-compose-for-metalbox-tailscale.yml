networks:

  networks_vlan_80:
    external: true
  networks_vlan_30:
    external: true
  networks_traefik_proxy:
    external: true
services:
  tailscale-quantum:
    container_name: tailscale-quantum
    hostname: quantum-normal
    image: tailscale/tailscale:${TAILSCALE_DOCKER_TAG:-stable}
    restart: unless-stopped
    cap_add:
      - NET_ADMIN # Used for configuring a network
      # - NET_RAW # Used for accessing privileged socket operations
    environment:
      TS_AUTHKEY: ${TAILSCALE_AUTHKEY}
      TS_EXTRA_ARGS: --advertise-exit-node --accept-dns --advertise-tags=tag:subnetrouter,tag:exitnode
      TS_ROUTES: ${TAILSCALE_ROUTES}
      TS_USERSPACE: false
      TS_STATE_DIR: /var/lib/tailscale
      # TS_ACCEPT_DNS: ${TS_ACCEPT_DNS}
    networks:
      networks_vlan_30:
        ipv4_address: ${TAILSCALE_QUANTUM_IP_ADDRESS}
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - ${DATA_STORAGE}/tailscale-quantum:/var/lib/tailscale
    dns:
      ${QUANTUM_DNS_IP_ADDRESS}
    healthcheck:
      # test: >
      #   sh -c 'offline_status=$(tailscale status --active | grep quantum-normal  | grep offline | wc -l) &&\
      #         all_status=$(tailscale status --active  | grep quantum-normal | wc -l) &&\
      #         echo $all_status $offline_status &&\
      #         if [[ $all_status != $offline_status ]]; then exit 0 ; else exit 1; fi'
      test: tailscale status --peers=false --json | grep -q 'Online.*true'
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: "60s"
    labels:
      - autoheal=true

  tailscale-vpn:
    container_name: tailscale-vpn
    hostname: quantum-vpn
    image: tailscale/tailscale:${TAILSCALE_DOCKER_TAG:-stable}
    restart: unless-stopped
    cap_add:
      - NET_ADMIN # Used for configuring a network
      # - NET_RAW # Used for accessing privileged socket operations
    environment:
      TS_AUTHKEY: ${TAILSCALE_AUTHKEY}
      TS_EXTRA_ARGS: --advertise-exit-node --accept-dns --advertise-tags=tag:exitnode
      TS_USERSPACE: false
      TS_STATE_DIR: /var/lib/tailscale
    networks:
      networks_vlan_30:
        ipv4_address: ${TAILSCALE_QUANTUM_VPN_IP_ADDRESS}
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1
    dns:
      ${QUANTUM_DNS_IP_ADDRESS}
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - ${DATA_STORAGE}/tailscale-vpn:/var/lib/tailscale
    healthcheck:
      # test: >
      #   sh -c 'offline_status=$(tailscale status --active | grep quantum-vpn  | grep offline | wc -l) &&\
      #         all_status=$(tailscale status --active  | grep quantum-vpn | wc -l) &&\
      #         echo $all_status $offline_status &&\
      #         if [[ $all_status != $offline_status ]]; then exit 0 ; else exit 1; fi'
      test: tailscale status --peers=false --json | grep -q 'Online.*true'
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      - autoheal=${AUTOHEAL:-true}

  # headscale:
  #   image: headscale/headscale:v0.24.2
  #   container_name: headscale
  #   restart: unless-stopped
  #   environment:
  #     - TZ=${TZ}
  #   volumes:
  #     - ${DATA_STORAGE}/headscale/conf:/etc/headscale
  #     - ${DATA_STORAGE}/headscale/data:/var/lib/headscale
  #   entrypoint: headscale serve
  #   networks:
  #     networks_traefik_proxy:
  #     networks_vlan_80:
  #       ipv4_address: ${HEADSCALE_IP_ADDRESS}
  #   labels:
  #     traefik.enable: true
  #     traefik.docker.network: networks_traefik_proxy
  #     # Configure service and router
  #     traefik.http.routers.headscale.rule: "Host(`headscale.${DOMAIN}`)"
  #     traefik.http.routers.headscale.tls.domains[0].main: dexome.com
  #     traefik.http.routers.headscale.tls.domains[0].sans: "*.dexome.com"
  #     traefik.http.routers.headscale.entrypoints: web,web-secure
  #     traefik.http.routers.headscale.tls.certresolver: certificato
  #     traefik.http.routers.headscale.service: headscale
  #     traefik.http.services.headscale.loadbalancer.server.port: 8080
  #     traefik.http.services.headscale.loadbalancer.server.scheme: http
  #     # Configure CORS middleware if needed
  #     traefik.http.middlewares.headscale-cors.headers.accesscontrolallowmethods: "GET,POST,PUT,PATCH,DELETE,OPTIONS"
  #     traefik.http.middlewares.headscale-cors.headers.accesscontrolallowheaders: "*"
  #     traefik.http.middlewares.headscale-cors.headers.accesscontrolalloworiginlist: "https://headscale-ui.${DOMAIN}, https://headscale2.${DOMAIN}"  # Add other origins if needed
  #     traefik.http.middlewares.headscale-cors.headers.accesscontrolmaxage: 100
  #     traefik.http.middlewares.headscale-cors.headers.addvaryheader: true
  #     # Configure CORS middleware if needed
  #     traefik.http.middlewares.headscale-websocket.headers.customRequestHeaders.X-Forwarded-Proto: "https"
  #     traefik.http.middlewares.headscale-websocket.headers.customRequestHeaders.Connection: "Upgrade"
  #     # Attach middlewares
  #     traefik.http.routers.headscale.middlewares: headscale-cors,headscale-websocket
  #     # UDP ports for DERP, etc
  #     traefik.udp.services.headscale-udp-41641.loadbalancer.server.port: 41641
  #     traefik.udp.services.headscale-udp-3478.loadbalancer.server.port: 3478

  # headscale-ui:
  #   image: ghcr.io/gurucomputing/headscale-ui:latest
  #   restart: unless-stopped
  #   container_name: headscale-ui
  #   networks:
  #     - networks_traefik_proxy
  #   labels:
  #     traefik.enable: true
  #     traefik.docker.network: networks_traefik_proxy
  #     traefik.http.routers.headscale-ui.rule: Host(`headscale-ui.${DOMAIN}`) && PathPrefix(`/admin`)"
  #     traefik.http.routers.headscale-ui.tls.domains[0].main: dexome.com
  #     traefik.http.routers.headscale-ui.tls.domains[0].sans: "*.dexome.com"
  #     traefik.http.routers.headscale-ui.entrypoints: web,web-secure
  #     traefik.http.routers.headscale-ui.tls.certresolver: certificato
  #     traefik.http.services.headscale-ui.loadbalancer.server.port: 8080
  #     traefik.http.services.headscale-ui.loadbalancer.server.scheme: http
