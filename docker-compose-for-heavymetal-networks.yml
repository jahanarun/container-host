version: "3.9"

networks:
  vlan_80:
    driver: macvlan # Otherwise PiHole and other containers cannot resolve DNS internally due to NAT issue within Docker
    # driver: ipvlan
    driver_opts:
      parent: ${NETWORK_DEVICE}.${METAL_VLAN_ID}
      name: macvlan${METAL_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${METAL_VLAN_ID}.0/24
          gateway: ${METAL_GATEWAY}
          ip_range: 10.100.${METAL_VLAN_ID}.192/26 # 192-255
          # aux_addresses:
          #   reserved: 10.100.${METAL_VLAN_ID}.1
          #   dns: 10.100.${METAL_VLAN_ID}.3

  vlan_20:
    driver: macvlan # Otherwise PiHole container cannot resolve DNS internally due to NAT issue within Docker
    driver_opts:
      parent: ${NETWORK_DEVICE}.${THINGS_VLAN_ID}
      name: macvlan${THINGS_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${THINGS_VLAN_ID}.0/24
          gateway: ${THINGS_GATEWAY}
          ip_range: 10.100.${THINGS_VLAN_ID}.12/30  # 12 - 15

  vlan_30:
    driver: macvlan
    driver_opts:
      # parent: ${NETWORK_DEVICE}.${QUANTUM_VLAN_ID}
      parent: ${VLAN30_NETWORK_DEVICE}
      name: macvlan${QUANTUM_VLAN_ID}
    ipam:
      config:
        - subnet: 10.100.${QUANTUM_VLAN_ID}.0/24
          gateway: ${QUANTUM_GATEWAY}
          ip_range: 10.100.${QUANTUM_VLAN_ID}.56/29 # range: 56-63 usable: 57-62

  omada_network:
    driver: macvlan
    driver_opts:
      parent: ${NETWORK_DEVICE}
      name: macvlan_omada
    ipam:
      config:
        - subnet: 10.100.0.0/24
          gateway: 10.100.0.1
          ip_range: 10.100.0.56/29 # range: 56-63 usable: 57-62

  traefik_proxy:
    driver: bridge
    internal: true

  internet:
    driver: bridge

  metrics:
    driver: bridge
    internal: true

services:
  do-nothing:
    image: jhnrn/do-nothing:latest
    container_name: do-nothing
    restart: unless-stopped
    networks:
      vlan_20:
      vlan_30:
      vlan_80:
      traefik_proxy:
      internet:

  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
        - CONTAINERS=1 # Allow access to viewing containers
        - POST=0 # Disallow any POST operations (effectively read-only)
    # ports:
    #     - 2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    networks:
      traefik_proxy:
      vlan_80:
        ipv4_address: ${HEAVYMETAL_DOCKERPROXY_IP_ADDRESS}
    restart: unless-stopped
    healthcheck:
      test: wget --spider http://localhost:2375/version || exit 1
      interval: "29s"
      timeout: "5s"
      retries: 3
      start_period: "21s"

  traefik:
    image: traefik:latest
    hostname: traefik
    container_name: traefik
    command:
      - "--log.level=${LOGLEVEL:-INFO}"
      # Access log
      - "--accesslog=${ACCESSLOG:-false}"
      - "--accesslog.bufferingsize=50" # collect logs as in-memory buffer before writing into log file
      - "--accesslog.fields.headers.defaultmode=drop" # drop all headers per default
      - "--accesslog.fields.headers.names.User-Agent=keep" # log user agent strings
      - '--accessLog.filePath="/logs/access.log"'
      - '--accesslog.filters.statuscodes=400-509'
      - "--accesslog.filters.retryattempts"
      - "--accesslog.filters.minduration=10ms"
      - '--accessLog.format="json"' # default: common
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker.endpoint=tcp://dockerproxy:2375"
      - "--providers.file.directory=/FileProvider/"
      - "--providers.file.watch=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web-noredirect.address=:81"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.web-secure.forwardedHeaders.trustedIPs=${TRUSTED_IPS}"
      - "--entrypoints.gogs-ssh.address=:22"
      - "--entrypoints.gitea-ssh.address=:2222"
      - "--entrypoints.rtsp.address=:8554"
      - "--entrypoints.webrtc.address=:8555"
      - "--entrypoints.mqtt.address=:1883"
      - "--entrypoints.websocket.address=:9001"
      - "--serverstransport.insecureskipverify=true"
      # Set up LetsEncrypt
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.certificato.acme.storage=/letsencrypt/acme.json"
      # Metrics
      - "--metrics.influxdb2=false"
      - "--metrics.influxdb2.address=http://influxdb:8086"
      - "--metrics.influxdb2.addrouterslabels=true"
      - "--metrics.influxdb2.addserviceslabels=true"
      - "--metrics.influxdb2.pushinterval=60s"
      - "--metrics.influxdb2.token=${INFLUXDB2_TRAEFIK_TOKEN}"
      - "--metrics.influxdb2.bucket=${INFLUXDB2_TRAEFIK_BUCKET}"
      - "--ping=true"
      # Plugins
      # - "--experimental.plugins.traefik-oidc-auth.modulename=github.com/sevensolutions/traefik-oidc-auth"
      # - "--experimental.plugins.traefik-oidc-auth.version=v0.12.0"
    networks:
      traefik_proxy:
      metrics:
      vlan_80:
        ipv4_address: ${TRAEFIK_IP_ADDRESS_2}
    dns:
      - ${METAL_DNS_IP_ADDRESS}
      - 1.1.1.1
    extra_hosts:
      host.docker.internal: host-gateway
    environment:
      CLOUDFLARE_EMAIL: ${CF_API_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN: ${DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.heavymetal.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web-noredirect"
      # - "traefik.http.routers.api.tls.certresolver=certificato"
      # - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      - "traefik.http.middlewares.private-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${PRIVATE_IPS_COMMA_SEPARATED},${METAL_NETWORK}"
      - "traefik.http.middlewares.quantum-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${QUANTUM_NETWORK}"
      - "traefik.http.middlewares.quantum_metal-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${QUANTUM_NETWORK},${METAL_NETWORK}"
      - "traefik.http.middlewares.quantum_things-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${QUANTUM_NETWORK},${THINGS_NETWORK}"
      - "traefik.http.middlewares.things_metal-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${THINGS_NETWORK},${METAL_NETWORK}"
      - "traefik.http.middlewares.things-ipallowlist.ipallowlist.sourcerange=127.0.0.1/32,${THINGS_NETWORK}"
      - traefik.docker.network=networks_traefik_proxy
      - homepage.group=HeavyMetal
      - homepage.name=Traefik
      - homepage.weight=1000
      - homepage.description=for HeavyMetal
      - homepage.icon=traefik.png
      - homepage.href=https://traefik.heavymetal.${DOMAIN}
      - homepage.widget.type=traefik
      - homepage.widget.url=https://traefik.heavymetal.${DOMAIN}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${APPDATA}/traefik/logs:/logs
      - ${APPDATA}/traefik/certs:/letsencrypt
      - ${APPDATA}/traefik/dynamic:/FileProvider
    restart: always
    depends_on:
      - dockerproxy
    healthcheck: # This is to announce to the network (router and switch) that this ip address is sitting here
      # test: traefik healthcheck --ping && ping -c 1 bing.com || exit 1
      test: traefik healthcheck --ping || exit 1
      interval: 30s
      retries: 5

  http-server:
    image: jhnrn/http-server-linux:latest
    container_name: "http-server"
    network_mode: host
    restart: always
    ports:
      - "3000:3000"

  omada-controller:
    container_name: omada-controller
    image: mbentley/omada-controller:${OMADA_VERSION:-5.15}
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 4096
        hard: 8192
    stop_grace_period: 60s
    networks:
      omada_network:
        ipv4_address: ${OMADA_IP_ADDRESS}
    environment:
      - PUID=508
      - PGID=508
      - MANAGE_HTTP_PORT=8088
      - MANAGE_HTTPS_PORT=8043
      - PORTAL_HTTP_PORT=8088
      - PORTAL_HTTPS_PORT=8843
      - PORT_APP_DISCOVERY=27001
      - PORT_ADOPT_V1=29812
      - PORT_UPGRADE_V1=29813
      - PORT_MANAGER_V1=29811
      - PORT_MANAGER_V2=29814
      - PORT_DISCOVERY=29810
      - SHOW_SERVER_LOGS=true
      - SHOW_MONGODB_LOGS=false
      - SSL_CERT_NAME=tls.crt
      - SSL_KEY_NAME=tls.key
      - TZ=${TZ}
    volumes:
      - ${APPDATA}/omada/data:/opt/tplink/EAPController/data
      - ${APPDATA}/omada/logs:/opt/tplink/EAPController/logs
