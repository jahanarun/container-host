name: heavymetal-services
networks:
  networks_vlan_20:
    external: true
  networks_vlan_30:
    external: true
  networks_vlan_80:
    external: true
  networks_traefik_proxy:
    external: true
  networks_internet:
    external: true
  network_gogs:
    internal: true
  network_gitea:
    internal: true
  network_gitea_migration:
    internal: true

services:
  # cloudflared-tunnel:
  #   image: jhnrn/cloudflared:latest
  #   container_name: "cloudflared-tunnel"
  #   hostname: cloudflared-tunnel
  #   user: $PUID:$PGID
  #   restart: always
  #   networks:
  #     networks_vlan_80:
  #   dns:
  #     - ${METAL_DNS_IP_ADDRESS}
  #   environment:
  #     TZ: ${TZ}
  #     TUNNEL_METRICS: "0.0.0.0:${CLOUDFARED_METRICS_PORT}"
  #   command:
  #     - tunnel
  #     - --no-autoupdate
  #     - run
  #     - --token
  #     - ${HEAVYMETAL_CLOUDFARED_TOKEN}
  #   labels:
  #     - homepage.group=Network
  #     - homepage.weight=2001
  #     - homepage.name=Cloudflared tunnel (heavymetal)
  #     - homepage.description=for HeavyMetal
  #     - homepage.icon=cloudflare-zero-trust.png
  #     - homepage.widget.type=cloudflared
  #     - homepage.widget.accountid=${CLOUDFLARED_TUNNEL_ACCOUNTID}
  #     - homepage.widget.tunnelid=${CLOUDFLARED_TUNNEL_TUNNELID_2}
  #     - homepage.widget.key=${CLOUDFLARE_TUNNEL_API_READ_TOKEN}
  #   healthcheck:
  #     test: curl -sSf 'http://localhost:${CLOUDFARED_METRICS_PORT}/healthcheck' || exit 1
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10

  ## Ofelia Job Runner (recommended for running background jobs)
  ## see https://github.com/mcuadros/ofelia
  ofelia:
    restart: unless-stopped
    image: mcuadros/ofelia:latest
    container_name: ofelia
    network_mode: none
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  gogs:
    image: "gogs/gogs:latest"
    container_name: "gogs"
    hostname: "gogs"
    restart: "always"
    # user: ${UID}:${GID}
    environment:
      RUN_CROND: true
      SSH_PORT: "22"
    volumes:
      - ${APPDATA}/gogs/data:/data
      - ${APPDATA}/gogs/backup:/backup
    networks:
      networks_traefik_proxy:
      network_gogs:
      network_gitea_migration:
    labels:
      dev.dozzle.group: gogs
      traefik.enable: true
      traefik.docker.network: networks_traefik_proxy
      traefik.http.routers.gogs-web.rule: "Host(`git.${DOMAIN}`) || Host(`gogs.${DOMAIN}`)"
      traefik.http.routers.gogs-web.tls.certresolver: "certificato"
      traefik.http.routers.gogs-web.entrypoints: "web,web-secure"
      traefik.http.routers.gogs-web.service: gogs-web
      traefik.http.services.gogs-web.loadbalancer.server.port: 3000
      traefik.tcp.routers.gogs-ssh.rule: HostSNI(`*`)
      traefik.tcp.routers.gogs-ssh.entrypoints: gogs-ssh
      traefik.tcp.routers.gogs-ssh.service: gogs-ssh
      traefik.tcp.services.gogs-ssh.loadbalancer.server.port: 22
    depends_on:
      - gogs-mariadb

  gogs-mariadb:
    image: "mariadb:latest"
    container_name: "gogs-mariadb"
    restart: "always"
    user: ${UID}:${GID}
    environment:
      MYSQL_DATABASE: "gogs"
      MYSQL_PASSWORD: ${GOGS_DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${GOGS_DATABASE_ROOT_PASSWORD}
      MYSQL_USER: "gogs"
    volumes:
      - ${APPDATA}/gogs/db:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - network_gogs
    labels:
      dev.dozzle.group: gogs

  proxmox-heavymetal-placeholder:
    image: jhnrn/do-nothing:latest
    container_name: proxmox-heavymetal-placeholder
    restart: unless-stopped
    network_mode: none
    labels:
      - homepage.group=Hardware
      - homepage.weight=2000
      - homepage.name=Proxmox
      - homepage.description=for HeavyMetal
      - homepage.icon=proxmox.png
      - homepage.href=https://${HEAVYMETAL_SERVICES_IP_ADDRESS}:8006
      - homepage.widget.type=proxmox
      - homepage.widget.url=https://${HEAVYMETAL_SERVICES_IP_ADDRESS}:8006
      - homepage.widget.username=${HEAVYMETAL_SERVICES_PROXMOX_TOKEN_ID}
      - homepage.widget.password=${HEAVYMETAL_SERVICES_PROXMOX_TOKEN_SECRET}
      # - homepage.widget.fields=["vms", "lxc", "resources.cpu", "resources.mem"]

  glances:
    image: nicolargo/glances:latest-full
    container_name: glances
    restart: unless-stopped
    pid: host
    privileged: true
    networks:
      networks_traefik_proxy:
    dns:
      - ${METAL_DNS_IP_ADDRESS}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ${APPDATA}/glances/glances.conf:/glances/conf/glances.conf
    environment:
      - GLANCES_OPT=-w
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.glances.rule=Host(`glanceshm.${DOMAIN}`)
      - traefik.http.routers.glances.tls.certresolver=certificato
      - traefik.http.routers.glances.entrypoints=web,web-secure
      - traefik.http.services.glances.loadbalancer.server.port=61208
      - traefik.docker.network=networks_traefik_proxy

  # scrutiny:
  #   container_name: scrutiny
  #   image: ghcr.io/analogj/scrutiny:master-omnibus
  #   restart: unless-stopped
  #   cap_add:
  #     - SYS_RAWIO
  #     - SYS_ADMIN
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     - COLLECTOR_API_ENDPOINT=http://localhost:8080
  #   # ports:
  #   #   - "8080:8080" # webapp
  #   #   - "8086:8086" # influxDB admin
  #   volumes:
  #     - /run/udev:/run/udev:ro
  #     - ${APPDATA}/scrutiny/config:/opt/scrutiny/config
  #     - ${APPDATA}/scrutiny/influxdb:/opt/scrutiny/influxdb
  #   networks:
  #     networks_traefik_proxy:
  #   devices:
  #     # bhot
  #     - /dev/disk/by-id/ata-ST4000VN008-2DR166_ZDH8E2ZN
  #     - /dev/disk/by-id/ata-ST4000NE001-3CR101_WRA01R0K
  #     # - /dev/disk/by-id/ata-ST4000VN008-2DR166_ZDH8CFHK
  #     # - /dev/disk/by-id/ata-ST4000VN008-2DR166_ZGY97PHF
  #     # - /dev/disk/by-id/ata-ST4000VN008-2DR166_ZGY2HPJQ
  #     - /dev/disk/by-id/ata-ST4000VN008-2DR166_ZDH11Y82
  #     # btank pool
  #     - /dev/disk/by-id/ata-ST16000NT001-3LV101_ZR5EZQSY
  #     - /dev/disk/by-id/ata-ST16000NT001-3LV101_ZR5EGXQ2
  #     - /dev/disk/by-id/ata-ST16000NT001-3LV101_ZR61B0GL
  #     # mergefs
  #     - /dev/disk/by-id/ata-ST8000VN0022-2EL112_ZA1D94RY
  #     # - /dev/disk/by-id/ata-ST8000DM004-2CX188_WCT023RG
  #     # rocket
  #     - /dev/disk/by-id/nvme-SHGP31-1000GM_ANB5N481711705A13
  #     - /dev/disk/by-id/nvme-TEAM_TM8FP4004T_112307250491415
  #     - /dev/disk/by-id/nvme-Samsung_SSD_970_EVO_Plus_2TB_S6S2NS0T529178Z
  #     - /dev/disk/by-id/nvme-Samsung_SSD_970_EVO_Plus_2TB_S6S2NS0T528930J
  #     - /dev/disk/by-id/nvme-TEAM_TM8FP4004T_112307250491594
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.scrutiny.rule=Host(`drive.${DOMAIN}`)
  #     - traefik.http.routers.scrutiny.tls.certresolver=certificato
  #     - traefik.http.routers.scrutiny.entrypoints=web,web-secure
  #     # - traefik.http.routers.scrutiny.middlewares=quantum-ipallowlist
  #     - traefik.http.services.scrutiny.loadbalancer.server.port=8080
  #     - traefik.docker.network=networks_traefik_proxy
  #     - homepage.group=Hardware
  #     - homepage.weight=3000
  #     - homepage.name=Disk health
  #     - homepage.description=for HeavyMetal
  #     - homepage.icon=scrutiny.png
  #     - homepage.href=https://drive.${DOMAIN}
  #     - homepage.widget.type=scrutiny
  #     - homepage.widget.url=https://drive.${DOMAIN}
  #     # - homepage.widget.fields=["passed", "failed", "unknown"]

  netdata-heavymetal:
    image: netdata/netdata:edge
    container_name: netdata-heavymetal
    hostname: netdata-heavymetal
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
      # - PERFMON
    privileged: true
    security_opt:
      - apparmor:unconfined
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - ${APPDATA}/netdata-heavymetal/config:/etc/netdata
      - ${APPDATA}/netdata-heavymetal/lib:/var/lib/netdata
      - ${APPDATA}/netdata-heavymetal/cache:/var/cache/netdata
      - /:/host/root:ro,rslave
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - NETDATA_CLAIM_TOKEN=${NETDATA_CLAIM_TOKEN}
      - NETDATA_CLAIM_URL=${NETDATA_CLAIM_URL}
      - NETDATA_CLAIM_ROOMS=${NETDATA_CLAIM_ROOMS}
      - NETDATA_EXTRA_DEB_PACKAGES=apcupsd intel-gpu-tools
    deploy:
      mode: global
    labels:
      - traefik.enable=true
      - traefik.http.routers.netdatahm.rule=Host(`netdatahm.${DOMAIN}`)
      - traefik.http.routers.netdatahm.tls.certresolver=certificato
      - traefik.http.routers.netdatahm.entrypoints=web,web-secure
      - traefik.http.services.netdatahm.loadbalancer.server.port=19999
      - traefik.docker.network=networks_traefik_proxy
    networks:
      networks_internet:
      networks_traefik_proxy:

  autoheal:
    image: jhnrn/docker-autoheal:latest
    container_name: "autoheal"
    restart: always
    environment:
      TZ: ${TZ}
      AUTOHEAL_CONTAINER_LABEL: autoheal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    network_mode: none

  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    restart: unless-stopped
    volumes:
      - ${APPDATA}/mosquitto:/mosquitto
      - ${APPDATA}/mosquitto/data:/mosquitto/data
      - ${APPDATA}/mosquitto/log:/mosquitto/log
    networks:
      networks_traefik_proxy:
      networks_vlan_80:
    # expose:
    #   - 1883:1883
    #   - 9001:9001
    labels:
      - traefik.enable=true
      - traefik.docker.network=networks_traefik_proxy
      - "traefik.tcp.services.mqtt.loadbalancer.server.port=1883"
      - "traefik.tcp.services.mqtt_websocket.loadbalancer.server.port=9001"
      - "traefik.tcp.routers.tcpr_mqtt.entrypoints=mqtt"
      - "traefik.tcp.routers.tcpr_mqtt.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.tcpr_mqtt.service=mqtt"
      - "traefik.tcp.routers.tcpr_mqtt_websocket.entrypoints=websocket"
      - "traefik.tcp.routers.tcpr_mqtt_websocket.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.tcpr_mqtt_websocket.service=mqtt_websocket"

  dozzle:
    container_name: dozzle
    hostname: dozzle
    image: amir20/dozzle:latest
    restart: unless-stopped
    environment:
      DOZZLE_HOSTNAME: heavymetal
      # DOZZLE_REMOTE_HOST: tcp://${METAL_DOCKERPROXY_IP_ADDRESS}:2375|metalbox,tcp://${HEAVYMETAL_DOCKERPROXY_IP_ADDRESS}:2375|heavymetal
      # DOZZLE_REMOTE_HOST: tcp://${METAL_DOCKERPROXY_IP_ADDRESS}:2375|metalbox
      DOZZLE_REMOTE_AGENT: ${METALBOX_DOZZLE_AGENT_IP_ADDRESS}:7007
    networks:
      # Need the transit network to talk to other docker host(s)
      networks_vlan_80:
        ipv4_address: ${HEAVYMETAL_DOZZLE_IP_ADDRESS}
      networks_traefik_proxy:
    dns:
      - ${METAL_DNS_IP_ADDRESS}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    labels:
      - homepage.group=Monitoring
      - homepage.description=Docker log monitoring
      - homepage.name=Dozzle
      - homepage.icon=dozzle.png
      - homepage.href=https://dockerlogs.${DOMAIN}
      - traefik.enable=true
      - traefik.http.routers.dozzle.rule=Host(`dockerlogs.${DOMAIN}`)
      - traefik.http.routers.dozzle.tls.certresolver=certificato
      - traefik.http.routers.dozzle.entrypoints=web,web-secure
      - traefik.http.routers.dozzle.middlewares=quantum-ipallowlist
      - traefik.http.services.dozzle.loadbalancer.server.port=8080
      - traefik.docker.network=networks_traefik_proxy
      - autoheal=true
    healthcheck:
      test: [ "CMD", "/dozzle", "healthcheck" ]
      # test: curl -sSf 'http://localhost:8080/healthcheck' || exit 1
      # test: /dozzle healthcheck
      interval: 10s
      timeout: 5s
      retries: 10

  cronjober:
    image: jhnrn/cronjober:latest
    container_name: cronjober
    restart: unless-stopped
    # command: ["/usr/sbin/crond", "-f"]
    user: ${UID}:${GID}
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      TZ_IN_ANOTHER_FORMAT: ${TZ_IN_ANOTHER_FORMAT}
      CAMERA_USERNAME: ${CAMERA_USERNAME}
      CAMERA_PASSWORD: ${CAMERA_PASSWORD}
      TAILNET: ${TAILNET}
      TAILSCALE_TOKEN: ${TAILSCALE_TOKEN}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ${APPDATA}/cronjober/crontab:/cronjober/crontab
      - ${APPDATA}/cronjober/.cache:/.cache
      - ${APPDATA}/cronjober/logs:/var/log
    networks:
      networks_vlan_20:
        ipv4_address: ${CRONJOBER_IP_ADDRESS}
    dns:
      - ${THINGS_DNS_IP_ADDRESS}

  librespeed:
    image: adolfintel/speedtest
    hostname: librespeed
    container_name: librespeed
    restart: unless-stopped
    user: $PUID:$PGID
    environment:
      - MODE=standalone
    networks:
      - networks_traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librespeed.rule=Host(`speedtest.${DOMAIN}`)"
      - "traefik.http.routers.librespeed.tls.certresolver=certificato"
      - traefik.http.routers.librespeed.entrypoints=web,web-secure
      - "traefik.http.services.librespeed.loadbalancer.server.port=80"
      - traefik.docker.network=networks_traefik_proxy

  # speedtest_tracker-db:
  #   image: postgres:15
  #   container_name: speedtest_tracker-db
  #   restart: always
  #   user: $PUID:$PGID
  #   environment:
  #     - POSTGRES_DB=speedtest_tracker
  #     - POSTGRES_USER=${SPEEDTEST_TRACKER_POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${SPEEDTEST_TRACKER_POSTGRES_PASSWORD}
  #     - TZ=UTC
  #   volumes:
  #     - ${APPDATA}/speedtest-tracker-alexjustesen/db:/var/lib/postgresql/data
  #   networks:
  #     speedtest_tracker:
  #   labels:
  #     - dev.dozzle.group=speedtest_tracker

  speedtest_tracker:
    image: lscr.io/linuxserver/speedtest-tracker:latest
    hostname: speedtest-tracker
    container_name: speedtest_tracker
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - DB_CONNECTION=sqlite
      # - DB_CONNECTION=pgsql
      # - DB_HOST=speedtest_tracker-db
      # - DB_PORT=5432
      # - DB_DATABASE=speedtest_tracker
      # - DB_USERNAME=${SPEEDTEST_TRACKER_POSTGRES_USER}
      # - DB_PASSWORD=${SPEEDTEST_TRACKER_POSTGRES_PASSWORD}
      # - TZ=UTC
      - TZ=${TZ}
      - APP_DEBUG=${SPEEDTEST_TRACKER_APP_DEBUG:-false}
      - APP_TIMEZONE=${TZ}
      - DISPLAY_TIMEZONE=${TZ}
      - SPEEDTEST_SCHEDULE=${SPEEDTEST_TRACKER_SCHEDULE}
      - APP_KEY=${SPEEDTEST_TRACKER_APP_KEY}
      - APP_NAME=${DOMAIN} speedtest tracker
      - PUBLIC_DASHBOARD=true
    volumes:
      - ${APPDATA}/speedtest-tracker/config:/config
      # - ${APPDATA}/speedtest-tracker/web:/etc/ssl/web
    # depends_on:
    #   - speedtest_tracker-db
    networks:
      # speedtest_tracker:
      networks_traefik_proxy:
      networks_vlan_80:
        ipv4_address: ${METAL_SPEEDTRACKER_IP_ADDRESS}
    dns:
      - ${METAL_DNS_IP_ADDRESS}
    restart: unless-stopped
    labels:
      # - dev.dozzle.group=speedtest_tracker
      - "traefik.enable=true"
      - "traefik.http.routers.speedtest-tracker.rule=Host(`speedtracker.${DOMAIN}`)"
      - "traefik.http.routers.speedtest-tracker.tls.certresolver=certificato"
      - "traefik.http.services.speedtest-tracker.loadbalancer.server.port=80"
      - traefik.http.routers.speedtest-tracker.entrypoints=web,web-secure
      - traefik.docker.network=networks_traefik_proxy
      - homepage.group=Network
      - homepage.weight=10000
      - homepage.name=Speedtest
      - homepage.icon=speedtest-tracker.png
      - homepage.href=https://speedtracker.${DOMAIN}/
      - homepage.description=Speedtest
      - homepage.widget.type=speedtest
      - homepage.widget.url=https://speedtracker.${DOMAIN}
      # - homepage.widget.fields=["download", "upload", "ping"]

  homepage:
    image: ghcr.io/gethomepage/homepage:main
    container_name: homepage
    hostname: homepage
    user: $PUID:$PGID
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - HOMEPAGE_ALLOWED_HOSTS=www.${DOMAIN}
    volumes:
      - ${APPDATA}/homepage:/app/config # Make sure your local config directory exists
      # - /var/run/docker.sock:/var/run/docker.sock:ro # (optional) For docker integrations
    networks:
      networks_traefik_proxy:
      networks_vlan_80:
        ipv4_address: ${METAL_HOMEPAGE_DASHBOARD_IP_ADDRESS}
    dns:
      - ${METAL_DNS_IP_ADDRESS}
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.homepage.rule: "Host(`www.${DOMAIN}`)"
      traefik.http.routers.homepage.tls.certresolver: "certificato"
      traefik.http.routers.homepage.middlewares: quantum-ipallowlist
      traefik.http.services.homepage.loadbalancer.server.port: 3000
      traefik.http.routers.homepage.entrypoints: web,web-secure
      traefik.docker.network: networks_traefik_proxy

  stirling-pdf:
    container_name: stirling-pdf
    restart: unless-stopped
    image: stirlingtools/stirling-pdf:latest
    volumes:
      - ${APPDATA}/stirling-pdf/trainingData:/usr/share/tessdata # Required for extra OCR languages
      - ${APPDATA}/stirling-pdf/extraConfigs:/configs
      - ${APPDATA}/stirling-pdf/logs:/logs/
      - ${APPDATA}/stirling-pdf/customFiles:/customFiles/
    environment:
      - DOCKER_ENABLE_SECURITY=false
      - INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false
      - LANGS=en_GB
    networks:
      networks_traefik_proxy:
    labels:
      - traefik.enable=true
      - traefik.http.routers.pdf.rule=Host(`pdf.${DOMAIN}`)
      - traefik.http.routers.pdf.tls.certresolver=certificato
      - traefik.http.routers.pdf.entrypoints=web,web-secure
      - traefik.http.routers.pdf.middlewares=quantum-ipallowlist
      - traefik.http.services.pdf.loadbalancer.server.port=8080
      - traefik.docker.network=networks_traefik_proxy

  samba:
    image: crazymax/samba
    container_name: samba
    hostname: docker_samba
    # network_mode: host
    networks:
      networks_vlan_30:
        ipv4_address: ${SAMBA_VLAN30_IP_ADDRESS}
    volumes:
      # - ./data:/data
      # - ./public:/samba/public
      # - ./share:/samba/share
      # - ./foo:/samba/foo
      - ${APPDATA}/samba/data:/data
      - ${APPDATA}/samba/public:/samba/public
      - ${TORRENTS}:/samba/downloads
      - ${MOVIES}:/samba/media/Movies
      - ${TVSHOWS}:/samba/media/Series
      - ${MUSIC}:/samba/media/Music
    cap_add:
      - CAP_NET_ADMIN
      - CAP_NET_RAW
    environment:
      TZ: ${TZ}
      WSDD2_ENABLE: ${WSDD2_ENABLE}
      WSDD2_NETBIOS_NAME: ${WSDD2_NETBIOS_NAME}
      PUID: ${PUID}
      PGID: ${PGID}
      S6_LOGGING: 0
      DISABLE_SOCKLOG: 1
      # Samba Core
      SAMBA_WORKGROUP: WORKGROUP
      SAMBA_SERVER_STRING: Samba Server
      SAMBA_LOG_LEVEL: 3
      # Security
      SAMBA_HOSTS_ALLOW: 0.0.0.0/0
      SAMBA_HOSTS_DENY:
    restart: unless-stopped
